/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface IMultiAccountInterface extends utils.Interface {
  functions: {};

  events: {
    "AddAccount(address,address,string)": EventFragment;
    "AllocateForAccount(address,address,uint256)": EventFragment;
    "Call(address,address,bytes,bool,bytes)": EventFragment;
    "DelegateAccess(address,address,bytes4,bool)": EventFragment;
    "DeployContract(address,address)": EventFragment;
    "DepositForAccount(address,address,uint256)": EventFragment;
    "EditAccountName(address,address,string)": EventFragment;
    "SetAccountImplementation(bytes,bytes)": EventFragment;
    "SetSymmioAddress(address,address)": EventFragment;
    "WithdrawFromAccount(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddAccount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllocateForAccount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Call"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateAccess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeployContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositForAccount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EditAccountName"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAccountImplementation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSymmioAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawFromAccount"): EventFragment;
}

export interface AddAccountEventObject {
  user: string;
  account: string;
  name: string;
}
export type AddAccountEvent = TypedEvent<
  [string, string, string],
  AddAccountEventObject
>;

export type AddAccountEventFilter = TypedEventFilter<AddAccountEvent>;

export interface AllocateForAccountEventObject {
  user: string;
  account: string;
  amount: BigNumber;
}
export type AllocateForAccountEvent = TypedEvent<
  [string, string, BigNumber],
  AllocateForAccountEventObject
>;

export type AllocateForAccountEventFilter =
  TypedEventFilter<AllocateForAccountEvent>;

export interface CallEventObject {
  user: string;
  account: string;
  _callData: string;
  _success: boolean;
  _resultData: string;
}
export type CallEvent = TypedEvent<
  [string, string, string, boolean, string],
  CallEventObject
>;

export type CallEventFilter = TypedEventFilter<CallEvent>;

export interface DelegateAccessEventObject {
  account: string;
  target: string;
  selector: string;
  state: boolean;
}
export type DelegateAccessEvent = TypedEvent<
  [string, string, string, boolean],
  DelegateAccessEventObject
>;

export type DelegateAccessEventFilter = TypedEventFilter<DelegateAccessEvent>;

export interface DeployContractEventObject {
  sender: string;
  contractAddress: string;
}
export type DeployContractEvent = TypedEvent<
  [string, string],
  DeployContractEventObject
>;

export type DeployContractEventFilter = TypedEventFilter<DeployContractEvent>;

export interface DepositForAccountEventObject {
  user: string;
  account: string;
  amount: BigNumber;
}
export type DepositForAccountEvent = TypedEvent<
  [string, string, BigNumber],
  DepositForAccountEventObject
>;

export type DepositForAccountEventFilter =
  TypedEventFilter<DepositForAccountEvent>;

export interface EditAccountNameEventObject {
  user: string;
  account: string;
  newName: string;
}
export type EditAccountNameEvent = TypedEvent<
  [string, string, string],
  EditAccountNameEventObject
>;

export type EditAccountNameEventFilter = TypedEventFilter<EditAccountNameEvent>;

export interface SetAccountImplementationEventObject {
  oldAddress: string;
  newAddress: string;
}
export type SetAccountImplementationEvent = TypedEvent<
  [string, string],
  SetAccountImplementationEventObject
>;

export type SetAccountImplementationEventFilter =
  TypedEventFilter<SetAccountImplementationEvent>;

export interface SetSymmioAddressEventObject {
  oldAddress: string;
  newAddress: string;
}
export type SetSymmioAddressEvent = TypedEvent<
  [string, string],
  SetSymmioAddressEventObject
>;

export type SetSymmioAddressEventFilter =
  TypedEventFilter<SetSymmioAddressEvent>;

export interface WithdrawFromAccountEventObject {
  user: string;
  account: string;
  amount: BigNumber;
}
export type WithdrawFromAccountEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawFromAccountEventObject
>;

export type WithdrawFromAccountEventFilter =
  TypedEventFilter<WithdrawFromAccountEvent>;

export interface IMultiAccount extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMultiAccountInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "AddAccount(address,address,string)"(
      user?: null,
      account?: null,
      name?: null
    ): AddAccountEventFilter;
    AddAccount(user?: null, account?: null, name?: null): AddAccountEventFilter;

    "AllocateForAccount(address,address,uint256)"(
      user?: null,
      account?: null,
      amount?: null
    ): AllocateForAccountEventFilter;
    AllocateForAccount(
      user?: null,
      account?: null,
      amount?: null
    ): AllocateForAccountEventFilter;

    "Call(address,address,bytes,bool,bytes)"(
      user?: null,
      account?: null,
      _callData?: null,
      _success?: null,
      _resultData?: null
    ): CallEventFilter;
    Call(
      user?: null,
      account?: null,
      _callData?: null,
      _success?: null,
      _resultData?: null
    ): CallEventFilter;

    "DelegateAccess(address,address,bytes4,bool)"(
      account?: null,
      target?: null,
      selector?: null,
      state?: null
    ): DelegateAccessEventFilter;
    DelegateAccess(
      account?: null,
      target?: null,
      selector?: null,
      state?: null
    ): DelegateAccessEventFilter;

    "DeployContract(address,address)"(
      sender?: null,
      contractAddress?: null
    ): DeployContractEventFilter;
    DeployContract(
      sender?: null,
      contractAddress?: null
    ): DeployContractEventFilter;

    "DepositForAccount(address,address,uint256)"(
      user?: null,
      account?: null,
      amount?: null
    ): DepositForAccountEventFilter;
    DepositForAccount(
      user?: null,
      account?: null,
      amount?: null
    ): DepositForAccountEventFilter;

    "EditAccountName(address,address,string)"(
      user?: null,
      account?: null,
      newName?: null
    ): EditAccountNameEventFilter;
    EditAccountName(
      user?: null,
      account?: null,
      newName?: null
    ): EditAccountNameEventFilter;

    "SetAccountImplementation(bytes,bytes)"(
      oldAddress?: null,
      newAddress?: null
    ): SetAccountImplementationEventFilter;
    SetAccountImplementation(
      oldAddress?: null,
      newAddress?: null
    ): SetAccountImplementationEventFilter;

    "SetSymmioAddress(address,address)"(
      oldAddress?: null,
      newAddress?: null
    ): SetSymmioAddressEventFilter;
    SetSymmioAddress(
      oldAddress?: null,
      newAddress?: null
    ): SetSymmioAddressEventFilter;

    "WithdrawFromAccount(address,address,uint256)"(
      user?: null,
      account?: null,
      amount?: null
    ): WithdrawFromAccountEventFilter;
    WithdrawFromAccount(
      user?: null,
      account?: null,
      amount?: null
    ): WithdrawFromAccountEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
